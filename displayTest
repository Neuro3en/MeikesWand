#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define OLED_RESET 4 // not used / nicht genutzt bei diesem Display
Adafruit_SSD1306 display(OLED_RESET);



#include <OneWire.h>
// http://www.pjrc.com/teensy/td_libs_OneWire.html
// http://milesburton.com/Dallas_Temperature_Control_Library
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)  

byte grad[8] = {
  B01110,
  B10001,
  B10001,
  B01110,
  B00000,
  B00000,
  B00000,
};

int ics =0; //count number of sensor


void setup()   {                

  // initialize with the I2C addr 0x3C / mit I2C-Adresse 0x3c initialisieren
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  
  // random start seed / zufälligen Startwert für Random-Funtionen initialisieren
  randomSeed(analogRead(0));
}

#define DRAW_DELAY 118
#define D_NUM 47

int i;




void loop() {

  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius;
  
    if ( !ds.search(addr)) {
   
  Serial.println(" ");    
    ds.reset_search();
    ics=0;
    return;
  }
  
ics++; 

  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end    44
  
  delay(800);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
  
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad

  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
  }
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }

//  for( i = 0; i < 8; i++) {
//      Serial.print(' ');
//      Serial.print(addr[i], HEX);
//  }
//Serial.println(' ');
  if (OneWire::crc8(addr, 7) != addr[7]) {
        Serial.println("CRC is not valid!");
      return;
  }

  celsius = (float)raw / 16.0;

//  Serial.print(celsius);
//  Serial.print("  ");
//  

  
  display.clearDisplay();
  
  // set text color / Textfarbe setzen
  display.setTextColor(WHITE);
  // set text size / Textgroesse setzen
  display.setTextSize(1);
  // set text cursor position / Textstartposition einstellen
  display.setCursor(1,0);
  // show text / Text anzeigen
 // display.println("OLED - Display - Test");
  display.setCursor(14,56);
  display.println("blog.simtronyx.de");
  display.setTextSize(2);
  display.setCursor(34,15);
  display.println(celsius);
  display.setCursor(30,34);
  display.println("World!");
  display.display();
 // delay(8000);
  display.clearDisplay();
//  
//  // invert the display / Display invertieren
//  display.invertDisplay(true);
//  delay(2000); 
//  display.invertDisplay(false);
//  delay(1000); 
//  
//  // draw some random pixel / zufaellige Pixel anzeigen
//  for(i=0;i<380;i++){
//    display.drawPixel(random(128),random(64), WHITE);
//    display.display();
//  }
//  delay(DRAW_DELAY);
//  display.clearDisplay();
//
//  // draw some random lines / zufaellige Linien anzeigen
//  for(i=0;i<D_NUM;i++){
//    display.drawLine(random(128),random(64),random(128),random(64), WHITE);
//    display.display();
//    delay(DRAW_DELAY);
//    display.clearDisplay();   
//  }
//
//  // draw some random triangles / zufaellige Dreiecke anzeigen
//  for(i=0;i<D_NUM;i++){
//    if(random(2))display.drawTriangle(random(128),random(64),random(128),random(64), random(128),random(64), WHITE); // normal
//    else display.fillTriangle(random(128),random(64),random(128),random(64), random(128),random(64), WHITE);     // filled / ausgefuellt
//    display.display();
//    delay(DRAW_DELAY);
//    display.clearDisplay();   
//  }
//
//  // draw some random rectangles / zufaellige Rechtecke anzeigen
//  for(i=0;i<D_NUM;i++){
//    int rnd=random(4);
//    if(rnd==0)display.drawRect(random(88),random(44),random(40),random(20), WHITE);               // normal
//    else if(rnd==1)display.fillRect(random(88),random(44),random(40),random(20), WHITE);            // filled / ausgefuellt
//    else if(rnd==2)display.drawRoundRect(random(88),random(44),random(30)+10,random(15)+5,random(5), WHITE);  // normal with rounded edges / normal mit abgerundeten Ecken
//    else display.fillRoundRect(random(88),random(44),random(30)+10,random(15)+5,random(5), WHITE);        // filled with rounded edges / ausgefuellt mit  mit abgerundeten Ecken
//    display.display();
//    delay(DRAW_DELAY);
//    display.clearDisplay();   
//  }
//
//  // draw some random circles / zufaellige Kreise anzeigen
//  for(i=0;i<D_NUM;i++){
//    if(random(2))display.drawCircle(random(88)+20,random(44)+20,random(10), WHITE); // normal
//    else display.fillCircle(random(88)+20,random(44)+20,random(10), WHITE);     // filled / ausgefuellt
//    display.display();
//    delay(DRAW_DELAY);
//    display.clearDisplay();   
//  }

}
